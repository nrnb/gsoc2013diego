
package charts;

import cytoscape.CyNode;
import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import java.awt.*;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfree.chart.*;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.CategoryItemEntity;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
import utils.Centrality;

public class PlotByNode extends JFrame {

    public static String nodeName;
    public CyNode node;
    public static DefaultCategoryDataset dds = new DefaultCategoryDataset();
    public static MyBarRenderer mybarrenderer;

    // polymorphic constructor
    public PlotByNode(CyNode node) {
        super("Plot By Node visualization for " + node.getIdentifier());
        this.setDefaultCloseOperation(this.HIDE_ON_CLOSE);
        nodeName = node.getIdentifier();
        this.node = node;
        JPanel jpanel = createDemoPanel();
        //jpanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(jpanel);
    }

    private CategoryDataset createDataset() {
        String avg = "average value";
        String s1 = node.getIdentifier() + " centrality value";
        DefaultCategoryDataset defaultcategorydataset = new DefaultCategoryDataset();

        for (Iterator it = Visualizer2.Visualizer.centralities.iterator(); it.hasNext();) {
            Centrality cent = (Centrality) it.next();
            // add average value for centrality cent
            double v1 = cent.getDefaultValue() / (Math.abs(cent.getMaxValue()))*100;
            double v2 = cent.getMinValue() / (Math.abs(cent.getMaxValue()))*100;
            double v3 = cent.getMaxValue() / (Math.abs(cent.getMaxValue()))*100;



            // add node value for centrality cent
            CyAttributes cattr = Cytoscape.getNodeAttributes();
            double vtmp = cattr.getDoubleAttribute(node.getIdentifier(), cent.getName());
            double v4 = vtmp / (Math.abs(cent.getMaxValue()))*100;
            if ((!Double.isInfinite(v1)) &&
                    (!Double.isInfinite(v2)) &&
                    (!Double.isInfinite(v3)) &&
                    (!Double.isInfinite(v4))) {
                defaultcategorydataset.addValue(v1, avg, cent.getName().split(" ")[1]);
                defaultcategorydataset.addValue(v2, "min value", cent.getName().split(" ")[1]);
                defaultcategorydataset.addValue(v3, "max value", cent.getName().split(" ")[1]);
                defaultcategorydataset.addValue(v4,
                        s1,
                        cent.getName().split(" ")[1]);

                //tooltip real values
                dds.addValue(cent.getDefaultValue(), avg, cent.getName().split(" ")[1]);
                dds.addValue(cent.getMinValue(), "min value", cent.getName().split(" ")[1]);
                dds.addValue(cent.getMaxValue(), "max value", cent.getName().split(" ")[1]);
                dds.addValue(cattr.getDoubleAttribute(node.getIdentifier(), cent.getName()), s1,
                        cent.getName().split(" ")[1]);
            }
        }
        return defaultcategorydataset;
    }

    static JFreeChart createChart(CategoryDataset categorydataset) {
        JFreeChart jfreechart = ChartFactory.createBarChart(nodeName, "centrality statistics for " + nodeName, "Percentage", categorydataset, PlotOrientation.VERTICAL, true, true, false);
        jfreechart.setBackgroundPaint(Color.white);

        // plotting setup
        CategoryPlot categoryplot = (CategoryPlot) jfreechart.getPlot();
        categoryplot.setBackgroundPaint(Color.lightGray);
        categoryplot.setDomainGridlinePaint(Color.white);
        categoryplot.setDomainGridlinesVisible(true);
        categoryplot.setRangeGridlinePaint(Color.white);

        NumberAxis numberaxis = (NumberAxis) categoryplot.getRangeAxis();
        numberaxis.setStandardTickUnits(NumberAxis.createStandardTickUnits());
        //bar renderer setup
        mybarrenderer = new MyBarRenderer();
        // permit bar outline marking
        mybarrenderer.setDrawBarOutline(true);
        categoryplot.setRenderer(mybarrenderer);
        // gradients for plots
        GradientPaint gradientpaint = new GradientPaint(0.0F, 0.0F, Color.blue, 0.0F, 0.0F, new Color(0, 0, 64));
        GradientPaint gradientpaint1 = new GradientPaint(0.0F, 0.0F, Color.green, 0.0F, 0.0F, new Color(0, 64, 0));
        GradientPaint gradientpaint2 = new GradientPaint(0.0F, 0.0F, Color.red, 0.0F, 0.0F, new Color(64, 0, 0));
        GradientPaint gradientpaint3 = new GradientPaint(0.0F, 0.0F, Color.WHITE, 0.0F, 0.0F, new Color(64, 64, 0));
        mybarrenderer.setSeriesPaint(0, gradientpaint);
        mybarrenderer.setSeriesPaint(1, gradientpaint1);
        mybarrenderer.setSeriesPaint(2, gradientpaint2);
        mybarrenderer.setSeriesPaint(2, gradientpaint3);
        // tool tips!
//        mybarrenderer.setLegendItemToolTipGenerator(new CategorySeriesLabelGenerator(){
//            public String generateLabel(CategoryDataset ds,int series){
//                return("Ciao!");
//            }
//        });

        //categoryplot.addAnnotation(annotation);

        return jfreechart;
    }

    public JPanel createDemoPanel() {
        JFreeChart jfreechart = createChart(createDataset());
        CategoryPlot categoryplot = (CategoryPlot) jfreechart.getPlot();
        MyBarRenderer mybarrenderer = (MyBarRenderer) categoryplot.getRenderer();
        DemoPanel demopanel = new DemoPanel(mybarrenderer);
        ChartPanel chartpanel = new ChartPanel(jfreechart);
        chartpanel.addChartMouseListener(demopanel);
        demopanel.add(chartpanel);
        //tooltip setup
                mybarrenderer.setToolTipGenerator(new CategoryToolTipGenerator() {

                    public CategoryDataset realValues = dds;

                    public String generateToolTip(CategoryDataset arg0, int arg1, int arg2) {
                        return (realValues.getValue(arg1, arg2).toString());
                    }
                });
        return demopanel;
    }
}
